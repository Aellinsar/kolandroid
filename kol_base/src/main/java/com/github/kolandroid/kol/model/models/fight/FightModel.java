package com.github.kolandroid.kol.model.models.fight;

import com.github.kolandroid.kol.connection.ServerReply;
import com.github.kolandroid.kol.connection.Session;
import com.github.kolandroid.kol.model.elements.ActionElement;
import com.github.kolandroid.kol.model.elements.OptionElement;
import com.github.kolandroid.kol.model.models.WebModel;
import com.github.kolandroid.kol.util.Regex;

import java.util.ArrayList;

public class FightModel extends WebModel {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = 7344809755641734582L;

    /**
     * //Ignored for now. private static final Regex ROUND_NUMBER = new
     * Regex("var onturn = (\\d+);", 1);
     */
    private static final Regex FIGHT_OVER = new Regex("<!--WINWINWIN-->");

    private static final Regex ACTION_BTN = new Regex(
            "<input[^<>]*type=[\"']?hidden[\"']?[^<>]*value=[\"']?([^\"']*?)[\"']?>.*?<input[^<>]*value=[\"']?([^\"<>]*?)[\"']?>",
            1, 2);

    private static final Regex ALL_SKILLS = OptionElement
            .regexFor("whichskill");
    private static final Regex ALL_ITEMS = OptionElement.regexFor("whichitem");

    private static final Regex ACTION_BAR = new Regex(
            "<div[^>]*skillmenu[^>]*>.*?(?=<div[^>]*content_)");
    private static final Regex MAIN_TAG = new Regex(
            "<div[^>]*content_[^>]*(?=>)");
    private static final Regex BUTTON_REVEALER = new Regex(
            "<a[^>]*>\\(show old combat form\\)</a>");
    private static final Regex BUTTONS = new Regex("<form[^>]*>.*?</form>");

    private static final Regex HAS_FUNKSLINGING = new Regex(
            "<select[^>]*whichitem2[^>]*>");

    private ArrayList<FightSkill> skills;
    private ArrayList<FightItem> items;

    private boolean fightFinished = false;
    private ActionElement attack = new ActionElement(getSession(), "Attack",
            "fight.php?action=attack");

    private boolean funkslinging;

    public FightModel(Session s, ServerReply text) {
        super(s, new ServerReply(text, filterHtml(text.html)));

        processSkills(text.html);
        processItems(text.html);

        if (FIGHT_OVER.matches(text.html))
            fightFinished = true;
    }

    private static String filterHtml(String html) {
        // First, we remove all components of the action bar

        // Remove the top bar
        String noBar = ACTION_BAR.replaceAll(html, "");
        // Remove special styling on the content div
        String renamed = MAIN_TAG.replaceAll(noBar,
                "$0 style=\"top:0px; margin:8px\"");
        // Remove the "Show old combat form" link
        String actionClear = BUTTON_REVEALER.replaceAll(renamed, "");

        // Finally, remove all forms from the older version of the fight page.
        return BUTTONS.replaceAll(actionClear, "");
    }

    private void processSkills(String html) {
        this.skills = new ArrayList<FightSkill>();

        ArrayList<String[]> buttons = ACTION_BTN.extractAll(html);
        for (String[] button : buttons) {
            if (button == null)
                continue;
            String action = button[0];
            String text = button[1];
            String img = "";

            System.out.println("Found button: " + action);
            if (action == null || text == null || text.length() == 0)
                continue;
            if (action.contentEquals("attack") || action.contentEquals("skill")
                    || action.contentEquals("useitem"))
                continue;

            switch (action) {
                case "steal":
                    img = "http://images.kingdomofloathing.com/itemimages/knobsack.gif";
                    break;
                case "runaway":
                    img = "http://images.kingdomofloathing.com/itemimages/runaway.gif";
                    break;
            }

            this.skills.add(new FightSkill(getSession(), text, img,
                    "fight.php?action=" + action));
        }

        String dropdown = ALL_SKILLS.extractSingle(html);
        ArrayList<OptionElement> dropdown_skills = OptionElement
                .extractOptions(dropdown);
        for (OptionElement option : dropdown_skills) {
            skills.add(new FightSkill(getSession(), option.text, option.img,
                    "fight.php?action=skill&whichskill=" + option.value));
        }
    }

    private void processItems(String html) {
        this.items = new ArrayList<FightItem>();

        String dropdown = ALL_ITEMS.extractSingle(html);

        ArrayList<OptionElement> dropdown_items = OptionElement
                .extractOptions(dropdown);
        for (OptionElement option : dropdown_items) {
            items.add(new FightItem(getSession(), option.text, option.img,
                    option.value));
        }

        this.funkslinging = HAS_FUNKSLINGING.matches(html);
    }

    public ArrayList<FightSkill> getSkills() {
        return this.skills;
    }

    public ArrayList<FightItem> getItems() {
        return this.items;
    }

    public boolean isFightOver() {
        return fightFinished;
    }

    public ActionElement getAttack() {
        return attack;
    }

    public boolean hasFunkslinging() {
        return funkslinging;
    }
}
