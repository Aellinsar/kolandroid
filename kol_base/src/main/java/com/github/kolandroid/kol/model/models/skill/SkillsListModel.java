package com.github.kolandroid.kol.model.models.skill;

import com.github.kolandroid.kol.connection.ServerReply;
import com.github.kolandroid.kol.connection.Session;
import com.github.kolandroid.kol.model.Model;
import com.github.kolandroid.kol.model.elements.OptionElement;
import com.github.kolandroid.kol.model.elements.OptionElement.OptionElementParser;
import com.github.kolandroid.kol.model.elements.basic.BasicGroup;
import com.github.kolandroid.kol.model.elements.interfaces.ModelGroup;
import com.github.kolandroid.kol.util.Logger;
import com.github.kolandroid.kol.util.Regex;

import java.util.ArrayList;

public class SkillsListModel extends Model implements SkillsSubmodel {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -6757825084689878953L;

    private static final Regex SKILL = new Regex(
            "<div[^>]*class=[\"']?skill[^>]*"
    );
    private static final Regex ICON_GROUP = new Regex("(<table[^>]*class=[\"']?cat[\"']?.*?)?div class=[\"']?balls[\"']?.*?<td height=4></td></tr></table>", 0);
    private static final Regex ICON_GROUP_NAME = new Regex("<b>([^<]*)<span class=[\"']?open[\"']?>", 1);
    private static final Regex ICON_SKILL = new Regex("<div[^>]*skill.*?</table>", 0);


    private static final Regex ICON_PWD = new Regex("&pwd=([^&]*)&", 1);
    private static final Regex ICON_YOURSELF = new Regex("&targetplayer=([^&'\\\\\"]+)&", 1);
    private static final Regex SKILLS_GROUP = new Regex(
            "(<div class=\"title\">[^<]*</div>)?<form[^>]*runskillz.php.*?</form>", 1, 0);
    private static final Regex TARGETS = new Regex("<select[^>]*targetplayer.*?</select>");
    private static final Regex PWD = new Regex("<input[^>]*pwd[^>]*>", 0);
    private static final Regex EXTRACT_VALUE = new Regex(
            "value=[\"']?([0-9a-fA-F]*)", 1);
    private static final Regex OPTION_YOURSELF = new Regex(
            "<option value=[\"']?(\\d+)[\"']?>\\(yourself\\)</option>", 1);

    private final ArrayList<ModelGroup<SkillModel>> skills;
    public SkillsListModel(Session s, ServerReply base) {
        super(s);
        if (base.html.contains("(select a skill)</option>")) {
            this.skills = processSkillsDropdowns(base.html);
        } else {
            this.skills = processSkillsIcons(base.html);
        }
    }

    private ArrayList<ModelGroup<SkillModel>> processSkillsIcons(String html) {
        Logger.log("SkillsListModel", "Parsing icons");
        ArrayList<ModelGroup<SkillModel>> skills = new ArrayList<ModelGroup<SkillModel>>();

        String pwd = ICON_PWD.extractSingle(html);
        String yourself = ICON_YOURSELF.extractSingle(html);

        for (String group : ICON_GROUP.extractAllSingle(html)) {
            ArrayList<SkillModel> elements = new ArrayList<>();
            for (String skill : ICON_SKILL.extractAllSingle(group)) {
                elements.add(new SkillModel(getSession(), pwd, yourself, skill));
            }

            if (elements.size() == 0) continue;

            String groupName = ICON_GROUP_NAME.extractSingle(group, "Skills");
            skills.add(new BasicGroup<SkillModel>(groupName, elements));
        }
        return skills;
    }

    private ArrayList<ModelGroup<SkillModel>> processSkillsDropdowns(String html) {
        Logger.log("SkillsListModel", "Parsing dropdowns");

        ArrayList<ModelGroup<SkillModel>> skills = new ArrayList<ModelGroup<SkillModel>>();

        final String pwd = EXTRACT_VALUE.extractSingle(PWD
                .extractSingle(html), "0");
        final String yourself = OPTION_YOURSELF.extractSingle(html, "");

        OptionElementParser<SkillModel> skillparser = new OptionElementParser<SkillModel>(
                "(select a skill)") {
            @Override
            public SkillModel make(OptionElement base) {
                return new SkillModel(getSession(), pwd, yourself, base);
            }
        };

        OptionElementParser<SkillModel> buffparser = new OptionElementParser<SkillModel>(
                "(select a skill)") {
            @Override
            public SkillModel make(OptionElement base) {
                return new SkillModel(getSession(), pwd, yourself, base);
            }
        };

        for (String[] group : SKILLS_GROUP.extractAll(html)) {
            String name = group[0];
            if (name == null) name = "Skills";
            name = name.replace(":", "");
            name = name.replace("<div class=\"title\">", "");
            name = name.replace("</div>", "");

            String form = group[1];
            if (form == null) continue;
            form = form.replace(" &nbsp;", "");
            form = TARGETS.replaceAll(form, "");

            ArrayList<SkillModel> elements;
            if (name.equalsIgnoreCase("Not-Buff") || yourself.equals("")) {
                //We can be sure the elements are not buffs
                elements = OptionElement.extractObjects(form, skillparser);
            } else {
                elements = OptionElement.extractObjects(form, buffparser);
            }

            Logger.log("SkillsListModel", "Parsed skill group " + name);

            skills.add(new BasicGroup(name, elements));
        }

        return skills;
    }

    public ArrayList<ModelGroup<SkillModel>> getSkills() {
        return skills;
    }

    @Override
    public String getTitle() {
        return "Skills";
    }

    @Override
    public <Result> Result execute(SkillsVisitor<Result> visitor) {
        return visitor.execute(this);
    }
}
