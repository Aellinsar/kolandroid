package com.github.kolandroid.kol.model.models.chat;

import com.github.kolandroid.kol.connection.Session;
import com.github.kolandroid.kol.model.LinkedModel;

import java.util.ArrayList;

public class ChannelModel extends LinkedModel<Void> {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -7441483376336509694L;

    private final ChatModel host;

    private final ArrayList<ChatText> messages;
    private final String name;
    private boolean active;

    private int unread;

    public ChannelModel(ChatModel host, String name, Session session) {
        super(session);

        this.host = host;

        this.name = name;
        this.active = name.contains("@");

        this.messages = new ArrayList<>();
        this.unread = 0;
    }

    protected void duplicate(ChannelModel copyFrom) {
        this.messages.clear();
        this.messages.addAll(copyFrom.messages);
        this.unread = copyFrom.unread;
        this.active = copyFrom.active;

        notifyView(null);
    }

    public void enter() {
        if (host == null)
            return;
        if (active)
            return;
        if (name.contains("@"))
            return;
        host.submitCommand(new ChatModel.ChatModelCommand.SubmitChatMessage("/listen " + name));
    }

    public void leave() {
        if (host == null)
            return;
        if (!active)
            return;
        if (name.contains("@")) {
            host.submitCommand(new ChatModel.ChatModelCommand.LeaveChannel(name));
            return;
        }

        host.submitCommand(new ChatModel.ChatModelCommand.SubmitChatMessage("/listen " + name));
    }

    public void makePrimaryChannel() {
        host.submitCommand(new ChatModel.ChatModelCommand.SetCurrentChannel(name));
    }

    public String getName() {
        return this.name;
    }

    public boolean isActive() {
        return this.active;
    }

    protected void setActive(boolean active) {
        this.active = active;
        if (!active)
            unread = 0;
        notifyView(null);
    }

    public void readAllMessages() {
        if (unread > 0) {
            host.submitCommand(new ChatModel.ChatModelCommand.ReadChannelMessages(this.getName()));
        }
    }

    protected void setMessagesRead() {
        this.unread = 0;
        notifyView(null);
    }

    protected void addMessage(ChatText message) {
        messages.add(message);
        if (this.name.startsWith("@"))
            setActive(true);

        if (active && host.hasStarted())
            this.unread++;

        if (message.isEvent()) {
            String text = message.getText();
            if (text.contains("Now listening to channel:"))
                setActive(true);
            if (text.contains("No longer listening to channel:"))
                setActive(false);
            if (text.contains("You are now talking in channel:"))
                setActive(true);
        }

        notifyView(null);
    }

    public ArrayList<ChatText> getMessages() {
        return messages;
    }

    public int getUnreadCount() {
        return unread;
    }

    public boolean isPrimaryChannel() {
        return host.getCurrentChannel().equals(this.name);
    }

    protected void notifyPrimaryChanged() {
        notifyView(null);
    }
}
