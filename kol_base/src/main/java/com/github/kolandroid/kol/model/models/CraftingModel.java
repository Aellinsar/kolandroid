package com.github.kolandroid.kol.model.models;

import com.github.kolandroid.kol.connection.ServerReply;
import com.github.kolandroid.kol.connection.Session;
import com.github.kolandroid.kol.model.GroupModel;
import com.github.kolandroid.kol.model.LiveModel;
import com.github.kolandroid.kol.model.models.CraftingModel.CraftingSubModel;
import com.github.kolandroid.kol.util.Regex;

import java.util.ArrayList;

public class CraftingModel extends GroupModel<CraftingSubModel> {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -4634759533016983940L;
    private static final Regex TOP_BAR = new Regex("(<body>.*?)<table.*?</table>.*?</table>", 0);
    private static final Regex SELECTION = new Regex("\\[[^\\]]*\\]", 0);
    private static final Regex CRAFT_TITLE = new Regex("\\[(?:<[^>]*>)?([^<]*)(?:<[^>]*>)?\\]", 1);
    private static final Regex CRAFT_LINK = new Regex("\\[<a href=[\"']?([^>]*?)[\"']?>*>[^<]*<[^>]*>\\]", 1);
    private final WebModel resultsPane;
    private CraftingSubModel[] crafts;
    private int initialSlot;


    public CraftingModel(Session s, ServerReply reply) {
        super(s);

        ArrayList<String> options = SELECTION.extractAllSingle(TOP_BAR.extractSingle(reply.html));

        initialSlot = 0;
        crafts = new CraftingSubModel[options.size()];
        for (int i = 0; i < options.size(); i++) {
            String title = CRAFT_TITLE.extractSingle(options.get(i));
            String link = CRAFT_LINK.extractSingle(options.get(i));
            if (link == null) {
                initialSlot = i;
                link = "";
            }
            System.out.println("Found: " + title + " @ " + link);

            crafts[i] = new CraftingSubModel(s, title, link);
        }

        if (crafts.length == 0) {
            crafts = new CraftingSubModel[]{new CraftingSubModel(s, "Error", "crafting.php")};
        }
        System.out.println("Loaded " + crafts.length + " crafts; selected " + initialSlot);

        crafts[initialSlot].process(reply);

        this.resultsPane = extractResultsPane(s, reply);
    }

    public WebModel getResultsPane() {
        return resultsPane;
    }

    @Override
    public int getActiveChild() {
        return initialSlot;
    }

    @Override
    public CraftingSubModel[] getChildren() {
        return crafts;
    }

    public static class CraftingSubModel extends LiveModel implements ChildModel {
        /**
         * Autogenerated by eclipse.
         */
        private static final long serialVersionUID = -7806837522602916575L;

        private String title;
        private WebModel base;

        public CraftingSubModel(Session s, String title, String updateUrl) {
            super(s, updateUrl, true);
            this.base = new WebModel(getSession(), new ServerReply(200, "", "", "", "", ""));
            this.title = title;
        }

        @Override
        protected void loadContent(ServerReply content) {
            ServerReply newRep = new ServerReply(content.responseCode,
                    content.redirectLocation, content.date, TOP_BAR.replaceAll(content.html, "$1"), content.url,
                    content.cookie);
            this.base = new WebModel(getSession(), newRep);
        }

        public String getTitle() {
            return title;
        }

        public WebModel getBaseModel() {
            this.access();
            return base;
        }

    }
}
