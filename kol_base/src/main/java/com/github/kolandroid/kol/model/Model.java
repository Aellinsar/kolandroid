package com.github.kolandroid.kol.model;

import com.github.kolandroid.kol.connection.ServerReply;
import com.github.kolandroid.kol.connection.Session;
import com.github.kolandroid.kol.gamehandler.LoadingContext;
import com.github.kolandroid.kol.gamehandler.ViewContext;
import com.github.kolandroid.kol.model.models.WebModel;
import com.github.kolandroid.kol.request.Request;
import com.github.kolandroid.kol.request.ResponseHandler;
import com.github.kolandroid.kol.util.Regex;

import java.io.Serializable;

/**
 * This class interfaces between kol pages and the corresponding views. It is
 * responsible for extracting relevant information from the server reply into
 * data objects. It also generally provides several actions which the view can
 * trigger, which update the model or trigger new requests.
 */
public abstract class Model implements Serializable {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -7378509328924319346L;
    // Regex to find the top results pane of any page
    private static final Regex RESULTS_PANE = new Regex(
            "<table[^>]*><tr><td[^>]*><b>Results:.*?</table>", 0);
    // Regex to find contents of the <body> tag of any page
    private static final Regex PAGE_BODY = new Regex(
            "(<body[^>]*>)(.*?)(</body>)", 2);
    // The current user session information.
    private final Session session;
    // The current context this model is displayed in.
    private transient ViewContext context;

    /**
     * Create a new model in the provided session.
     *
     * @param s Session to use in all future requests by this model.
     */
    public Model(Session s) {
        this.session = s;
    }

    /**
     * Extract a model for the results pane of this page, if any exists.
     *
     * @param s    Session in which to create the new model.
     * @param base Page to parse
     * @return A model representing the results pane; null if no results pane
     * was found.
     */
    protected static WebModel extractResultsPane(Session s, ServerReply base) {
        String resultsPane = RESULTS_PANE.extractSingle(base.html);
        if (resultsPane == null)
            return null;

        String html = PAGE_BODY.replaceAll(base.html, "$1<center>"
                + resultsPane + "</center>$3");
        ServerReply newRep = new ServerReply(base.responseCode,
                base.redirectLocation, base.date, html,
                "small/craftingresults.php", base.cookie);
        return new WebModel(s, newRep);
    }

    /**
     * Connect a newly generated view to this model by including new context.
     *
     * @param context The context of the connecting view.
     */
    public void attachView(ViewContext context) {
        this.context = context;
    }

    /**
     * Make a new request in the context of this model.
     *
     * @param req The request to make.
     */
    protected void makeRequest(Request req) {
        this.makeRequest(req, context.getPrimaryRoute());
    }

    /**
     * Make a new request in the context of this model.
     *
     * @param req      The request to make.
     * @param listener Response handler to use for the result.
     */
    protected void makeRequest(Request req, ResponseHandler listener) {
        req.makeAsync(session, context.createLoadingContext(), listener);
    }

    /**
     * Make a new blocking request in the context of this model.
     *
     * @param req The request to make.
     * @return A ServerReply, the result of the request
     */
    protected ServerReply makeBlockingRequest(Request req) {
        return req.makeBlocking(session, context.createLoadingContext());
    }

    /**
     * Make a new request in the context of this model, without immediately
     * informing the view of the request.
     *
     * @param req The request to make.
     */
    protected void makeRequestBackground(Request req, ResponseHandler listener) {
        req.makeAsync(session, LoadingContext.NONE, listener);
    }

    /**
     * Get the default handler for any requests which cannot be directly handled
     * by the new model.
     *
     * @return A handler
     */
    protected ResponseHandler getGameHandler() {
        return context.getPrimaryRoute();
    }

    public Session getSession() {
        return session;
    }
}
