package com.github.kolandroid.kol.model.models.chat;

import com.github.kolandroid.kol.connection.Session;
import com.github.kolandroid.kol.model.Model;
import com.github.kolandroid.kol.model.models.chat.raw.RawAction;
import com.github.kolandroid.kol.request.Request;
import com.github.kolandroid.kol.util.Callback;

public class ChatAction extends Model {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -8557324235833386443L;

    private final String name;
    private final RawAction base;

    protected ChatAction(Session s, String name) {
        super(s);
        this.name = name;
        this.base = null;
    }
    protected ChatAction(Session s, RawAction base) {
        super(s);

        this.base = base;
        if (base == null) {
            this.name = "[null]";
        } else if (base.title == null) {
            this.name = (base.entry == null) ? "[null]" : base.entry;
        } else {
            this.name = base.title;
        }
    }

    public void submit(ChatText message, ChatModel context, Callback<String> submitExternalUrl) {
        if (base == null)
            return;

        ChatText.ChatUser messageSender = message.getUser();
        if (messageSender == null)
            return; //cannot submit with no user

        String player;

        if (base.useId) {
            player = messageSender.getId() + "";
        } else {
            player = messageSender.getName();
        }

        switch (base.action) {
            case 1:
                Request webReq = new Request(base.entry + "?" + base.arg + "=" + messageSender.getId());
                makeRequest(webReq);
                break;
            case 2:
                //noinspection StatementWithEmptyBody
                if (base.submit) {
                    // submit in chat
                    context.submitCommand(new ChatModel.ChatModelCommand.SubmitChatMessage(base.entry + " " + player));
                    break;
                } else {
                    // fallthrough to filling up chat prompt
                }
            case 3: // prompt for text
            case 4: // confirm action
                // in either case, we'll default to filling up the chat prompt
                context.submitCommand(new ChatModel.ChatModelCommand.FillPartialChat(base.entry + " " + player));
                break;
            case 5:
                Request chatReq = new Request(base.entry + messageSender.getId());
                makeRequest(chatReq);
        }
    }

    @Override
    public String toString() {
        return this.name;
    }
}