package com.github.kolandroid.kol.android.controllers.chat;

import android.content.Context;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;

import com.github.kolandroid.kol.android.R;
import com.github.kolandroid.kol.android.screen.Screen;
import com.github.kolandroid.kol.android.screen.ScreenSelection;
import com.github.kolandroid.kol.android.util.HandlerCallback;
import com.github.kolandroid.kol.model.models.chat.ChatModel;
import com.github.kolandroid.kol.model.models.chat.ChatModelSegment;
import com.github.kolandroid.kol.model.models.chat.stubs.ChatSubmissionStubModel;

public class ChatSubmissionController extends ChatStubController<ChatSubmissionStubModel> {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -1682070095158477350L;

    private transient HandlerCallback<String> onPartialTextFillCallback;

    public ChatSubmissionController(ChatModel model) {
        super(new ChatSubmissionStubModel(model));
    }

    @Override
    public int getView() {
        return R.layout.fragment_chat_submission;
    }

    @Override
    public void chooseScreen(ScreenSelection choice) {
        choice.displayDialog(this);
    }

    @Override
    public void doConnect(View view, ChatSubmissionStubModel model, final Screen host) {
        final EditText text = (EditText) view.findViewById(R.id.chatroom_text_input);

        Button submit = (Button) view.findViewById(R.id.chatroom_submit);
        submit.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View arg0) {
                String message = text.getText().toString();

                getModel().submitCommand(new ChatModel.ChatModelCommand.SubmitChatMessage(getModel().getCurrentChannel(), message));
                text.setText("");

                InputMethodManager inputManager = (InputMethodManager) host
                        .getActivity().getSystemService(
                                Context.INPUT_METHOD_SERVICE);
                inputManager.hideSoftInputFromWindow(host.getActivity()
                                .getCurrentFocus().getWindowToken(),
                        InputMethodManager.HIDE_NOT_ALWAYS);
            }
        });

        onPartialTextFillCallback = new HandlerCallback<String>() {
            @Override
            protected void receiveProgress(String message) {
                if (text != null) {
                    text.setText(message);
                }
            }
        };
        getModel().setPartialChatCallback(onPartialTextFillCallback.weak());
    }

    @Override
    public void disconnect(Screen host) {
        super.disconnect(host);

        if (onPartialTextFillCallback != null) {
            onPartialTextFillCallback.close();
            onPartialTextFillCallback = null;
        }
    }


    @Override
    public void receiveProgress(View view, ChatSubmissionStubModel model, Iterable<ChatModelSegment> message, Screen host) {
        // do nothing
    }
}
