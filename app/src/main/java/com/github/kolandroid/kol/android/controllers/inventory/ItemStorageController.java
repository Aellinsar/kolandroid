package com.github.kolandroid.kol.android.controllers.inventory;

import com.github.kolandroid.kol.android.controller.Controller;
import com.github.kolandroid.kol.android.controller.GroupController;
import com.github.kolandroid.kol.android.controller.UpdateController;
import com.github.kolandroid.kol.android.screen.ScreenSelection;
import com.github.kolandroid.kol.model.models.inventory.EquipmentPocketModel;
import com.github.kolandroid.kol.model.models.inventory.InventoryUpdateModel;
import com.github.kolandroid.kol.model.models.inventory.ItemPocketModel;
import com.github.kolandroid.kol.model.models.inventory.ItemStorageModel;
import com.github.kolandroid.kol.model.models.inventory.PocketVisitor;
import com.github.kolandroid.kol.util.Logger;

public abstract class ItemStorageController<E extends ItemStorageModel> extends GroupController<ItemPocketModel, E> implements UpdateController<E> {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -275856461187273887L;

    private final int groupColor;

    public ItemStorageController(E model, int groupColor) {
        super(model);
        this.groupColor = groupColor;
    }

    @Override
    public void chooseScreen(ScreenSelection choice) {
        choice.displayPrimaryUpdate(this, true);
    }

    @Override
    public Controller getController(ItemPocketModel child) {
        return child.execute(new PocketVisitor<Controller>() {
            @Override
            public Controller display(ItemPocketModel model) {
                Logger.log("ItemStorageController", "Creating new controller!");
                return new ItemPocketController(model, groupColor);
            }

            @Override
            public Controller display(EquipmentPocketModel model) {
                return new EquipmentPocketController(model, groupColor);
            }
        });
    }

    @Override
    public <F> boolean tryApply(Class<F> type, F object) {
        if (super.tryApply(type, object)) return true;

        if (type.equals(InventoryUpdateModel.class)) {
            InventoryUpdateModel newUpdate = (InventoryUpdateModel) object;
            getModel().apply(newUpdate);
            this.doReplace(getModel()); //reload the views
            return true;
        }
        return false;
    }
}
