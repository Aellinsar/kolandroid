package com.github.kolandroid.kol.android.controllers.fight;

import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

import com.github.kolandroid.kol.android.R;
import com.github.kolandroid.kol.android.binders.ElementBinder;
import com.github.kolandroid.kol.android.binders.SubtextBinder;
import com.github.kolandroid.kol.android.controller.Controller;
import com.github.kolandroid.kol.android.controller.ModelController;
import com.github.kolandroid.kol.android.controllers.web.WebController;
import com.github.kolandroid.kol.android.screen.DialogScreen;
import com.github.kolandroid.kol.android.screen.Screen;
import com.github.kolandroid.kol.android.screen.ScreenSelection;
import com.github.kolandroid.kol.android.screen.ViewScreen;
import com.github.kolandroid.kol.android.util.searchlist.ListSelector;
import com.github.kolandroid.kol.android.util.searchlist.SearchListController;
import com.github.kolandroid.kol.android.util.searchlist.SerializableSelector;
import com.github.kolandroid.kol.model.elements.ActionElement;
import com.github.kolandroid.kol.model.models.fight.FightAction;
import com.github.kolandroid.kol.model.models.fight.FightItem;
import com.github.kolandroid.kol.model.models.fight.FightModel;

import java.util.ArrayList;

public class FightController extends ModelController<FightModel> {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -7848760148015474401L;
    private static ListSelector<FightAction> actionSelector = new SerializableSelector<FightAction>() {
        @Override
        public boolean selectItem(Screen host, FightAction action) {
            action.attachView(host.getViewContext());
            action.use();
            return true;
        }
    };

    public FightController(FightModel model) {
        super(model);
    }

    @Override
    public int getView() {
        return R.layout.fight_view;
    }

    @Override
    public void chooseScreen(ScreenSelection choice) {
        choice.displayPrimary(this);
    }

    @Override
    public void attach(View view, final FightModel model, final Screen host) {
        final Button attack = (Button) view.findViewById(R.id.fight_attack);
        attack.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View arg0) {
                ActionElement action = model.getAttack();
                if (action != null)
                    action.submit(host.getViewContext());
            }
        });

        final Button useSkill = (Button) view.findViewById(R.id.fight_skill);
        useSkill.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View btn) {
                ArrayList<FightAction> skills = model.getSkills();
                Controller skillsController = new SearchListController<FightAction>(skills, SubtextBinder.ONLY, actionSelector);
                DialogScreen.display(skillsController, host,
                        "Choose a skill to use:");
            }
        });

        final Button useItem = (Button) view.findViewById(R.id.fight_items);
        useItem.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View btn) {
                ArrayList<FightItem> items = model.getItems();

                if (getModel().hasFunkslinging()) {
                    Controller itemsController = new FunkslingingController(items);
                    DialogScreen.display(itemsController, host, "Select items to use:");
                } else {
                    Controller itemsController = new SearchListController(items, ElementBinder.ONLY, actionSelector);
                    DialogScreen.display(itemsController, host, "Select item to use:");
                }
            }
        });

        if (model.isFightOver()) {
            attack.setEnabled(false);
            useSkill.setEnabled(false);
            useItem.setEnabled(false);
        }

        ViewScreen webScreen = (ViewScreen) view
                .findViewById(R.id.fight_web_screen);
        WebController web = new WebController(model);
        webScreen.display(web, host);
    }

}
