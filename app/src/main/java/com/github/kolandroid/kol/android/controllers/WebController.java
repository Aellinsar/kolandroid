package com.github.kolandroid.kol.android.controllers;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.net.Uri;
import android.util.Log;
import android.view.View;
import android.webkit.WebResourceResponse;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import com.github.kolandroid.kol.android.R;
import com.github.kolandroid.kol.android.controller.UpdatableModelController;
import com.github.kolandroid.kol.android.screen.Screen;
import com.github.kolandroid.kol.android.screen.ScreenSelection;
import com.github.kolandroid.kol.model.models.WebModel;
import com.github.kolandroid.kol.util.Logger;
import com.github.kolandroid.kol.util.Regex;

import java.io.InputStream;

public class WebController extends UpdatableModelController<WebModel> {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -8051419766943400254L;

    private final static Regex BODY_TAG = new Regex("<body[^>]*?>");

    private transient WebView web;

    public WebController(WebModel model) {
        super(model);
    }

    public void updateModel(WebModel base) {
        super.updateModel(base);
        if (web != null) {
            String fixedHtml = BODY_TAG
                    .replaceAll(base.getHTML(),
                            "$0<meta name=\"viewport\" content=\"width=device-width\">");
            web.loadData(fixedHtml, "text/html", null);
        }
    }

    @Override
    public int getView() {
        if (getModel().isSmall()) {
            return R.layout.dialog_web_screen;
        } else {
            return R.layout.fragment_web_screen;
        }
    }

    @Override
    public void chooseScreen(ScreenSelection choice) {
        if (getModel().isSmall()) {
            choice.displayDialog(this);
        } else {
            choice.displayPrimary(this);
        }
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    public void connect(View view, WebModel model, final Screen host) {

        WebViewClient client = new WebViewClient() {
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                Logger.log("Request", "Request made to " + url);

                if (url.startsWith("data:text/html"))
                    return true;

                url = url.replace("reallyquitefake/", "");
                Log.i("WebFragment", "Request made to " + url);
                if (!getModel().makeRequest(url)) {
                    Log.i("WebFragment", "External request: " + url);

                    // Otherwise, the link is not for a kol page; launch an
                    // external activity
                    Intent intent = new Intent(Intent.ACTION_VIEW,
                            Uri.parse(url));
                    host.getActivity().startActivity(intent);
                }

                return true;
            }

            @Override
            public WebResourceResponse shouldInterceptRequest(WebView view, String url) {
                if (url.contains(".php")) {
                    //All requests to .php must include the proper cookies
                    InputStream result = getModel().makeBlockingRequest(url);
                    return new WebResourceResponse("text/html; charset=UTF-8", null, result);
                } else {
                    return null;
                }
            }
        };

        web = (WebView) view.findViewById(R.id.webview);
        // Fix the viewport size by inserting a viewport tag
        String fixedHtml = BODY_TAG
                .replaceAll(model.getHTML(),
                        "$0<meta name=\"viewport\" content=\"width=device-width\">");
        Log.i("WebFragment", "Loading content of size " + fixedHtml.length());

        web.getSettings().setBuiltInZoomControls(true);
        web.getSettings().setLoadWithOverviewMode(true);
        web.getSettings().setUseWideViewPort(true);
        web.getSettings().setJavaScriptEnabled(true);
        web.addJavascriptInterface(new JavaScriptInterface(), "FORMOUT");

		/*
        CookieSyncManager syncManager = CookieSyncManager.createInstance(web.getContext());
		CookieManager cookieManager = CookieManager.getInstance();
		cookieManager.setAcceptCookie(true);
		cookieManager.removeAllCookie();

		SystemClock.sleep(1000);
		Session session = model.getSession();
		cookieManager.setCookie("www.kingdomofloathing.com", session.getCookie());
		//cookieManager.setCookie("www.kingdomofloathing.com", "appserver=" + session.getServer());
		Logger.log("CookieSetting", session.getCookie());
		//Logger.log("CookieSetting", "appserver=" + session.getServer());
		syncManager.sync();
		*/

        web.loadDataWithBaseURL(model.getURL(), fixedHtml, "text/html", null,
                null);

        web.invalidate();
        web.setWebViewClient(client);


    }

    class JavaScriptInterface {
        @android.webkit.JavascriptInterface
        public void debug(String text) {
            Log.i("WebFragment Form", "Debug: " + text);
        }

        @android.webkit.JavascriptInterface
        public void processFormData(String formData) {
            Log.i("WebFragment Form", "Res: " + formData);
            getModel().makeRequest(formData);
        }
    }

}
