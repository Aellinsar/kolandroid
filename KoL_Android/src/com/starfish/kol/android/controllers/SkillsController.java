package com.starfish.kol.android.controllers;

import java.util.ArrayList;

import android.view.View;

import com.starfish.kol.android.controller.Controller;
import com.starfish.kol.android.controller.GroupController;
import com.starfish.kol.android.dialogs.BuffDialog;
import com.starfish.kol.android.dialogs.MultiUseDialog;
import com.starfish.kol.android.screen.DialogScreen;
import com.starfish.kol.android.screen.Screen;
import com.starfish.kol.android.screen.ScreenSelection;
import com.starfish.kol.android.util.listbuilders.SkillsBuilder;
import com.starfish.kol.android.util.searchlist.ControllerOnListSelection;
import com.starfish.kol.android.util.searchlist.ControllerSerializableSelector;
import com.starfish.kol.android.util.searchlist.GroupSearchListController;
import com.starfish.kol.android.util.searchlist.SearchListController;
import com.starfish.kol.model.elements.interfaces.ModelGroup;
import com.starfish.kol.model.models.WebModel;
import com.starfish.kol.model.models.skill.ItemsListModel;
import com.starfish.kol.model.models.skill.SkillModelElement;
import com.starfish.kol.model.models.skill.SkillModelElement.Buff;
import com.starfish.kol.model.models.skill.SkillModelElement.RestorerItem;
import com.starfish.kol.model.models.skill.SkillModelElement.Skill;
import com.starfish.kol.model.models.skill.SkillModelVisitor;
import com.starfish.kol.model.models.skill.SkillsListModel;
import com.starfish.kol.model.models.skill.SkillsModel;
import com.starfish.kol.model.models.skill.SkillsSubmodel;
import com.starfish.kol.model.models.skill.SkillsVisitor;

public class SkillsController extends GroupController<SkillsSubmodel, SkillsModel> {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = -6281249096497073143L;

	public SkillsController(SkillsModel model) {
		super(model);
	}

	@Override
	public void chooseScreen(ScreenSelection choice) {
		choice.displayPrimary(this);
	}

	private static final ControllerOnListSelection<SkillModelElement> selector = new ControllerSerializableSelector<SkillModelElement>() {
		/**
		 * Autogenerated by eclipse.
		 */
		private static final long serialVersionUID = -6654955956381975044L;

		@Override
		public boolean selectItem(final Screen host, SkillModelElement item) {
			item.select(new SkillModelVisitor() {
				@Override
				public void display(Skill skill) {
					MultiUseDialog.create(skill, "Cast").show(host.getFragmentManager(),
							"skilloptions");
				}

				@Override
				public void display(Buff buff) {
					BuffDialog.create(buff).show(host.getFragmentManager(), "buffoptions");
				}

				@Override
				public void display(RestorerItem item) {
					MultiUseDialog.create(item, "Use").show(host.getFragmentManager(),
							"multiuseitem");
				}
			});
			return false;
		}		
	};
	
	private static final SkillsVisitor<Controller> childRoute = new SkillsVisitor<Controller>() {
		@Override
		public Controller execute(SkillsListModel model) {
			ArrayList<ModelGroup<SkillModelElement>> list = model.getSkills();
			SkillsBuilder builder = new SkillsBuilder();
			return new GroupSearchListController<SkillModelElement>(list, builder, selector);
		}

		@Override
		public Controller execute(ItemsListModel model) {
			ArrayList<SkillModelElement> list = model.getItems();
			SkillsBuilder builder = new SkillsBuilder();
			return new SearchListController<SkillModelElement>(list, builder, selector);
		}
	};
	
	@Override
	protected Controller getController(SkillsSubmodel child) {
		return child.execute(childRoute);
	}

	@Override
	public void connect(View view, SkillsModel model, Screen host) {
		super.connect(view, model, host);
		
		WebModel results = model.getResultsPane();
		if(results != null) {
			WebController web = new WebController(results);
			DialogScreen.display(web, host);
		}
	}
}
