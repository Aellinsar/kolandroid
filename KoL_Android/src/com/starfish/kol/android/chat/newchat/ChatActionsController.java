package com.starfish.kol.android.chat.newchat;

import java.util.ArrayList;

import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;

import com.starfish.kol.android.R;
import com.starfish.kol.android.binders.TextBinder;
import com.starfish.kol.android.controller.Controller;
import com.starfish.kol.android.screen.Screen;
import com.starfish.kol.android.screen.ScreenSelection;
import com.starfish.kol.android.util.AndroidProgressHandler;
import com.starfish.kol.android.util.adapters.ListAdapter;
import com.starfish.kol.model.ProgressHandler;
import com.starfish.kol.model.models.chat.ChatAction;
import com.starfish.kol.model.models.chat.ChatAction.ChatActionSubmission;
import com.starfish.kol.model.models.chat.ChatText;

public class ChatActionsController implements Controller {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = 7974380804392024382L;

	private final ChatText base;
	
	private transient ChatConnection connection;
	
	public ChatActionsController(ChatText base) {
		this.base = base;
	}
	
	@Override
	public int getView() {
		return R.layout.dialog_chat_screen;
	}

	@Override
	public void connect(View view, final Screen host) {
		ArrayList<ChatAction> actions = base.getActions();
		 ListAdapter<ChatAction> adapter = new ListAdapter<ChatAction>(host.getActivity(), actions, TextBinder.ONLY);

		final ProgressHandler<String> fillChatText = new AndroidProgressHandler<String>() {
			@Override
			protected void recieveProgress(String message) {
				ChatActionsControllerHost activity = (ChatActionsControllerHost)host.getActivity();
				activity.fillChatText(message);
			}			
		};
		 
	    ListView list = (ListView)view.findViewById(R.id.dialog_chat_list);
	    list.setAdapter(adapter);
	    list.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> ad, View list, int pos,
					long arg3) {
				ChatAction select = (ChatAction)ad.getItemAtPosition(pos);
				if(select == null)
					return;
				if(connection == null)
					return;
				if(connection.getModel() == null)
					return;
				
				ChatActionSubmission sub = select.getPartialSubmission(base, fillChatText);
				sub.submit(connection.getModel());
				host.close();
			}
	    });

		this.connection = ChatConnection.create(this.getClass().getSimpleName());
	    connection.connect(host.getActivity());
	}

	@Override
	public void disconnect(Screen host) {
		if(connection != null)
			connection.close(host.getActivity());
	}

	@Override
	public void chooseScreen(ScreenSelection choice) {
		choice.displayDialog(this);
	}
	
	
	public interface ChatActionsControllerHost {
		public void fillChatText(String text);
	}
}
