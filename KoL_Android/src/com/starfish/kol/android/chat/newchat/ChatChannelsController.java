package com.starfish.kol.android.chat.newchat;

import java.util.ArrayList;

import android.view.View;
import android.widget.ListView;

import com.starfish.kol.android.R;
import com.starfish.kol.android.binders.ChannelBinder;
import com.starfish.kol.android.controller.Controller;
import com.starfish.kol.android.screen.Screen;
import com.starfish.kol.android.screen.ScreenSelection;
import com.starfish.kol.android.util.adapters.ListAdapter;
import com.starfish.kol.model.ProgressHandler;
import com.starfish.kol.model.elements.interfaces.DeferredAction;
import com.starfish.kol.model.models.chat.ChannelModel;
import com.starfish.kol.model.models.chat.ChatModel;

public class ChatChannelsController implements Controller {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = -7646035545611799838L;

	private transient LiveChatConnection connection;
	private transient ListAdapter<ChannelModel> adapter;
	private transient ChatModel base;
		
	@Override
	public int getView() {
		return R.layout.dialog_chat_channel_list;
	}

	@Override
	public void connect(View view, final Screen host) {
		ProgressHandler<ChannelModel> localChannelSelector = new ProgressHandler<ChannelModel>() {
			@Override
			public void reportProgress(ChannelModel item) {
				ChatChannelsControllerHost activity = (ChatChannelsControllerHost)host.getActivity();
				activity.switchChannel(item.getName());
				host.close();
			}
		};
		ProgressHandler<DeferredAction<ChatModel>> localActionSelector = new ProgressHandler<DeferredAction<ChatModel>>() {
			@Override
			public void reportProgress(DeferredAction<ChatModel> item) {
				if(base != null) {
					item.submit(base);
				}
			}	
		};
		
		ArrayList<ChannelModel> channels = getAvailableChannels(base);
		ChannelBinder binder = new ChannelBinder(localChannelSelector, localActionSelector);
	    adapter = new ListAdapter<ChannelModel>(host.getActivity(), channels, binder);

	    ListView list = (ListView)view.findViewById(R.id.dialog_chat_list);
	    list.setAdapter(adapter);

		this.connection = new LiveChatConnection(this.getClass().getSimpleName()) {
			@Override
			public void onConnection(ChatModel model) {
				base = model;
				recievedRefresh();
			}

			@Override
			public void recievedRefresh() {
				if(adapter != null) {
					adapter.setElements(getAvailableChannels(base));
				}
			}			
		};
	    connection.connect(host.getActivity());
	}

	private ArrayList<ChannelModel> getAvailableChannels(ChatModel model) {
		ArrayList<ChannelModel> result = new ArrayList<ChannelModel>();
		if(model == null)
			return result;
		
		for(ChannelModel channel : model.getChannels()) {
			if(channel.isActive() || !channel.getName().contains("@"))
				result.add(channel);
		}
		return result;
	}
	
	@Override
	public void disconnect(Screen host) {
		if(connection != null)
			connection.close(host.getActivity());
	}

	@Override
	public void chooseScreen(ScreenSelection choice) {
		choice.displayDialog(this);
	}
	
	public interface ChatChannelsControllerHost
	{
		public void switchChannel(String to);
	}
}
