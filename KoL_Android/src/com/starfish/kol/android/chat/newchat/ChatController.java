package com.starfish.kol.android.chat.newchat;

import java.util.ArrayList;
import java.util.HashSet;

import android.view.View;
import android.widget.TabHost.OnTabChangeListener;

import com.starfish.kol.android.R;
import com.starfish.kol.android.controller.Controller;
import com.starfish.kol.android.screen.FragmentScreen;
import com.starfish.kol.android.screen.Screen;
import com.starfish.kol.android.screen.ScreenSelection;
import com.starfish.kol.android.util.CustomFragmentTabHost;
import com.starfish.kol.model.models.chat.ChannelModel;
import com.starfish.kol.model.models.chat.ChatModel;

public class ChatController implements Controller {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = -2290839327914902450L;
	
	private HashSet<String> currentTabs;
	
	private transient LiveChatConnection connection;	
	private transient CustomFragmentTabHost tabs;
	private transient ChatModel base = null;
	
	public ChatController() {
		this.currentTabs = new HashSet<String>();
	}

	@Override
	public int getView() {
		return R.layout.fragment_tabs_screen;
	}

	@Override
	public void connect(View view, Screen host) {
		tabs = (CustomFragmentTabHost) view
				.findViewById(R.id.tabs_tabhost);
		tabs.setup(host.getActivity(), host.getChildFragmentManager());
		tabs.clearAllTabs();
		tabs.setOnTabChangedListener(new OnTabChangeListener() {
			@Override
			public void onTabChanged(String tabId) {
				if(base != null)
					base.setCurrentRoom(tabId);
			}
		});
		
		this.currentTabs = new HashSet<String>();
		
		if(base != null) {
			updateTabs();
		}

		this.connection = new LiveChatConnection(this.getClass().getSimpleName()) {
			@Override
			public void onConnection(ChatModel model) {
				base = model;
			}

			@Override
			public void recievedRefresh() {
				updateTabs();
			}			
		};
		connection.connect(host.getActivity());
	}
	
	private void updateTabs() {
		HashSet<String> currentChannels = new HashSet<String>();
		for(ChannelModel child : base.getChannels()) {
			if(child.isActive())
				currentChannels.add(child.getName());
		}
		
		for(String channel : currentChannels) {
			if(!currentTabs.contains(channel)) {
				addTab(channel);
			}				
		}
		
		ArrayList<String> toRemove = new ArrayList<String>();
		for(String channel : currentTabs) {
			if(!currentChannels.contains(channel)) {
				toRemove.add(channel);
			}
		}
		
		for(String channel : toRemove) {
			removeTab(channel);
		}
	}
	
	private void addTab(final String tag) {
		if(tabs == null)
			return;
		
		Controller channel = new ChannelController(tag);
		tabs.addTab(tabs.newTabSpec(tag).setIndicator(tag),
				FragmentScreen.class, FragmentScreen.prepare(channel));
		currentTabs.add(tag);
	}
	
	private void removeTab(String tag) {
		if(tabs == null)
			return;
		
		View tabTitle = tabs.getTabByTag(tag);
		tabTitle.setVisibility(View.GONE);
		currentTabs.remove(tag);
	}

	public String getCurrentChannel() {
		if(tabs == null)
			return "";
		return tabs.getCurrentTabTag();
	}
	
	@Override
	public void disconnect(Screen host) {
		if(connection != null)
			connection.close(host.getActivity());
	}

	@Override
	public void chooseScreen(ScreenSelection choice) {
		choice.displayPrimary(this);
	}
}
