package com.starfish.kol.android.chat.newchat;

import java.util.ArrayList;
import java.util.HashSet;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.view.View;
import android.view.View.OnLongClickListener;
import android.widget.TabHost.OnTabChangeListener;

import com.starfish.kol.android.R;
import com.starfish.kol.android.controller.Controller;
import com.starfish.kol.android.screen.FragmentScreen;
import com.starfish.kol.android.screen.Screen;
import com.starfish.kol.android.screen.ScreenSelection;
import com.starfish.kol.android.util.CustomFragmentTabHost;
import com.starfish.kol.model.models.chat.ChannelModel;
import com.starfish.kol.model.models.chat.ChatModel;

public class ChatController implements Controller {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = -2290839327914902450L;

	private HashSet<String> currentTabs;

	private transient LiveChatConnection connection;
	private transient CustomFragmentTabHost tabs;
	private transient ChatModel base = null;
	private transient Screen host;

	public ChatController() {
		this.currentTabs = new HashSet<String>();
	}

	@Override
	public int getView() {
		return R.layout.fragment_tabs_screen;
	}

	@Override
	public void connect(View view, Screen host) {
		this.host = host;

		tabs = (CustomFragmentTabHost) view.findViewById(R.id.tabs_tabhost);
		tabs.setup(host.getActivity(), host.getChildFragmentManager());
		tabs.clearAllTabs();
		tabs.setOnTabChangedListener(new OnTabChangeListener() {
			@Override
			public void onTabChanged(String tabId) {
				if (base != null)
					base.setCurrentRoom(tabId);
			}
		});

		this.currentTabs = new HashSet<String>();

		if (base != null) {
			updateTabs();
		}

		this.connection = new LiveChatConnection(this.getClass()
				.getSimpleName()) {
			@Override
			public void onConnection(ChatModel model) {
				base = model;
			}

			@Override
			public void recievedRefresh() {
				updateTabs();
			}
		};
		connection.connect(host.getActivity());
	}

	private void updateTabs() {
		ArrayList<String> currentChannels = new ArrayList<String>();
		for (ChannelModel child : base.getChannels()) {
			if (child.isActive())
				currentChannels.add(child.getName());
		}

		for (String channel : currentChannels) {
			if (!currentTabs.contains(channel)) {
				addTab(channel);
			}
		}

		ArrayList<String> toRemove = new ArrayList<String>();
		for (String channel : currentTabs) {
			if (!currentChannels.contains(channel)) {
				toRemove.add(channel);
			}
		}

		for (String channel : toRemove) {
			removeTab(channel);
		}
		
		View current = tabs.getCurrentTabView();
		if(current.getVisibility() == View.GONE && currentChannels.size() != 0) {
			tabs.setCurrentTabByTag(currentChannels.get(0));
		}
	}

	private void addTab(final String tag) {
		if (tabs == null)
			return;

		View preexisting = tabs.getTabByTag(tag);
		if (preexisting != null) {
			preexisting.setVisibility(View.VISIBLE);
		} else {
			Controller channel = new ChannelController(tag);
			tabs.addTab(tabs.newTabSpec(tag).setIndicator(tag),
					FragmentScreen.class, FragmentScreen.prepare(channel));
			currentTabs.add(tag);
			View tabTitle = tabs.getTabByTag(tag);
			tabTitle.setOnLongClickListener(new OnLongClickListener() {
				@Override
				public boolean onLongClick(View arg0) {
					if (host == null)
						return false;
					new AlertDialog.Builder(host.getActivity())
							.setTitle("Close " + tag + "?")
							.setPositiveButton("Ok",
									new DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {
											if (base != null) {
												ChannelModel channel = base
														.getChannel(tag);
												channel.leave().submit(base);
												dialog.dismiss();
											}
										}

									}).setNegativeButton("Cancel", null).show();
					return true;
				}
			});
		}

		currentTabs.add(tag);
	}

	private void removeTab(String tag) {
		if (tabs == null)
			return;

		View tabTitle = tabs.getTabByTag(tag);
		tabTitle.setVisibility(View.GONE);
		currentTabs.remove(tag);
	}

	public String getCurrentChannel() {
		if (tabs == null)
			return "";
		return tabs.getCurrentTabTag();
	}

	@Override
	public void disconnect(Screen host) {
		this.host = null;
		if (connection != null)
			connection.close(host.getActivity());
	}

	@Override
	public void chooseScreen(ScreenSelection choice) {
		choice.displayPrimary(this);
	}
}
