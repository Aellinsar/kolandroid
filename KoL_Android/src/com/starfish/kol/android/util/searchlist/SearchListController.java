package com.starfish.kol.android.util.searchlist;

import java.util.ArrayList;

import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.EditText;
import android.widget.ListView;

import com.starfish.kol.android.R;
import com.starfish.kol.android.controller.Controller;
import com.starfish.kol.android.screen.Screen;
import com.starfish.kol.android.screen.ScreenSelection;
import com.starfish.kol.android.util.adapters.ListElementBuilder;
import com.starfish.kol.model.elements.ActionElement;

public class SearchListController<E> implements Controller {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = -327422277247085374L;

	private ArrayList<E> initial;
	private ListElementBuilder<E> builder;
	private ListSelector<E> selector;

	public SearchListController(ArrayList<E> initial,
			ListElementBuilder<E> builder, ListSelector<E> selector) {
		this.builder = builder;
		this.initial = initial;
		this.selector = selector;
	}

	public static <E extends ActionElement> SearchListController<E> create(ArrayList<E> items, ListElementBuilder<E> builder) {
		return new SearchListController<E>(items, builder, new ActionSelector<E>());
	}
	

	@Override
	public int getView() {
		return R.layout.fragment_search_list;
	}

	private transient HighlightableListAdapter<E> adapter;

	@Override
	public void connect(View view, final Screen host) {
		adapter = new HighlightableListAdapter<E>(view.getContext(), initial, builder);

		ListView list = (ListView)view.findViewById(R.id.list_display_list);
		list.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> myAdapter, View myView, int myItemInt, long mylng) {
				@SuppressWarnings("unchecked")
				E choice = (E)myAdapter.getItemAtPosition(myItemInt);
				if(selector != null)
					if(selector.selectItem(host, choice)) {
						host.close();
					}
			}
		});
		list.setAdapter(adapter);

		final EditText text = (EditText)view.findViewById(R.id.list_display_text);
		text.addTextChangedListener(new TextWatcher() {
			@Override
			public void afterTextChanged(Editable s) {
				adapter.changeFilter(s.toString());
			}

			@Override
			public void beforeTextChanged(CharSequence arg0, int arg1,
					int arg2, int arg3) {
				//ignored
			}

			@Override
			public void onTextChanged(CharSequence arg0, int arg1, int arg2,
					int arg3) {
				//ignored				
			}
		});
	}

	@Override
	public void disconnect() {
		// do nothing
	}

	@Override
	public void chooseScreen(ScreenSelection choice) {
		choice.displayPrimary(this);
	}

}
