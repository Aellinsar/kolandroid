package com.starfish.kol.connection;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Serializable;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;

public class Connection {
	private static final String AGENT_NAME = "AndroidKOL";
	private static final int TIMEOUT = 10000;

	private String URLbase;
	private HttpURLConnection connection = null;

	private boolean redirect = true;
	private final ArrayList<String> formFields;

	public Connection(Connection c) {
		this(c.URLbase);
	}

	public Connection(String url) {
		this.URLbase = url;
		formFields = new ArrayList<String>();
	}

	public void clearFormFields() {
		formFields.clear();
	}

	public void addFormField(String element, String value) {
		addFormField(element, value, false);
	}

	public void addFormField(String element, String value,
			boolean allowDuplicates) {
		if (!allowDuplicates) {
			Iterator<String> i = formFields.iterator();
			while (i.hasNext())
				if (i.next().startsWith(element))
					i.remove();
		}
		formFields.add(element + '=' + ((value == null) ? "" : value));
	}

	private URL getFullURL() throws MalformedURLException {
		if (formFields.size() == 0)
			return new URL(URLbase);

		StringBuilder fieldValues = new StringBuilder(URLbase).append('?')
				.append(formFields.get(0));
		for (int i = 1; i < formFields.size(); i++)
			fieldValues.append('&').append(formFields.get(i));
		return new URL(fieldValues.toString());
	}

	public void disableRedirects() {
		redirect = false;
	}
	public ServerReply connect(String cookie)
			throws MalformedURLException, ConnectionException {
		return connect(cookie, 0);
	}

	public ServerReply connect(String cookie,
			int numReattempts) throws MalformedURLException,
			ConnectionException {
		URL url = getFullURL();
		try {
			connection = (HttpURLConnection) url.openConnection();

			if (cookie != null)
				connection.setRequestProperty("Cookie", cookie);
			connection.setDoInput(true);
			connection.setRequestProperty("User-Agent", AGENT_NAME);
			connection.setReadTimeout(TIMEOUT);
			connection.setInstanceFollowRedirects(redirect);
			connection.setUseCaches(true);

			// Send any extra data along
			byte[] data = getData();
			if (data != null && data.length != 0) {
				connection.setRequestMethod("POST");
				connection.setDoOutput(true);
				OutputStream os = connection.getOutputStream();
				os.write(data);
				os.flush();
				os.close();
			} else
				connection.setDoOutput(false);

			connection.connect();
			return new ServerReply(connection);
		} catch (IOException e) {
			// Error connecting
			if (numReattempts > 0)
				return connect(cookie, numReattempts - 1);
			//System.out.println("ERROR: " + url);
			throw new ConnectionException(e);
		}
	}

	public static class ServerReply implements Serializable{
		/**
		 * Autogenerated by eclipse.
		 */
		private static final long serialVersionUID = -7171484980493452228L;
		
		public final int responseCode;
		public final String redirectLocation;
		public final String date;
		public final String html;
		public final String url;
		
		public final String cookie;
		
		public ServerReply(int responseCode, String redirectLocation, String date, String html, String url, String cookie) {
			this.responseCode = responseCode;
			this.redirectLocation = redirectLocation;
			this.date = date;
			this.html = html;
			this.url = url;
			this.cookie = cookie;
		}
		
		public ServerReply(HttpURLConnection base) throws IOException {
			responseCode = base.getResponseCode();
			redirectLocation = (responseCode / 100 == 3) ? base
					.getHeaderField("Location") : null;

			url = base.getURL().toString();
			date = base.getHeaderField("Date");
			html = getResponse(base);
			cookie = getCookie(base);
		}

		private String getResponse(HttpURLConnection base) throws IOException {
			InputStream is = base.getInputStream();
			if (is == null)
				return "";

			StringWriter sw = new StringWriter();
			BufferedReader r = new BufferedReader(new InputStreamReader(is));
			String s;
			while((s = r.readLine()) != null){
				sw.append(s + '\n');
			}
			
			return sw.toString();
		}

		public String getCookie(HttpURLConnection base) {			
			String cookies = "";
			for (int i = 0;; i++) {
				if (base.getHeaderField(i) == null)
					break;
				
				if("Set-Cookie".equals(base.getHeaderFieldKey(i))) {
					if(cookies.length() > 0) cookies += "; ";
					cookies += base.getHeaderField(i);
				}
			}
			return cookies;
		}
		
		@Override
		public String toString() {
			String s = "RESPONSE CODE: " + responseCode;
			if (responseCode / 100 == 3)
				s += "\nREDIRECT: " + redirectLocation;
			s += "\nRESULT: " + html;
			return s;
		}
	}

	public class ConnectionException extends IOException {
		private static final long serialVersionUID = 1592480171367152698L;
		
		private Exception base;
		
		public ConnectionException(Exception base) {
			this.base = base;
		}
				
		@Override
		public String toString() {
			return base.toString();
		}
	}

	protected byte[] getData() {
		return null;
	}
}
