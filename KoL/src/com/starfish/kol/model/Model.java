package com.starfish.kol.model;

import java.io.Serializable;

import com.starfish.kol.connection.ServerReply;
import com.starfish.kol.connection.Session;
import com.starfish.kol.gamehandler.GameHandler;
import com.starfish.kol.gamehandler.ViewContext;
import com.starfish.kol.request.ResponseHandler;
import com.starfish.kol.request.Request;
import com.starfish.kol.request.SimulatedRequest;

/**
 * This class interfaces between kol pages and the corresponding views. It is
 * responsible for extracting relevant information from the server reply into
 * data objects. It also generally provides several actions which the view can
 * trigger, which update the model or trigger new requests.
 * 
 * @param <Callback>
 *            The type of object this model will send back to a corresponding
 *            view.
 */
public abstract class Model<Callback> implements Serializable {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = -7378509328924319346L;

	// Callback from the model back to the view.
	private transient ProgressHandler<Callback> view;

	// An external handler, designed for use in all requests which are not
	// directly handled by the model.
	private transient GameHandler mainLoop;

	// The current user session information.
	private final Session session;
	// The most recent page parsed by this model.
	private ServerReply lastReply;

	/**
	 * Create a new model in the provided session from scratch, with no
	 * associated server reply.
	 * 
	 * @param s
	 *            Session to use in all future requests by this model.
	 */
	public Model(Session s) {
		this.session = s;
		this.lastReply = null;
	}

	/**
	 * Create a new model in the provided session, based on the provided server
	 * reply.
	 * 
	 * @param s
	 *            Session to use in all future requests by this model.
	 * @param base
	 *            Server reply which underlies this model.
	 */
	public Model(Session s, ServerReply base) {
		this.session = s;
		this.lastReply = base;
	}

	/**
	 * Update the server reply which underlies this model.
	 * 
	 * @param newBase
	 *            The new server reply which now underlies this model.
	 */
	protected void updateBase(ServerReply newBase) {
		this.lastReply = newBase;
	}

	/**
	 * Get the server reply which underlies this model.
	 * 
	 * @return The server reply which underlies this model.
	 */
	protected ServerReply getBase() {
		return lastReply;
	}

	/**
	 * Make a new request which will ultimately redisplay this model as a
	 * WebModel. This can be used to spot check the accuracy of the model
	 * parsing by comparing it to the corresponding WebModel.
	 */
	public void simulateWebRequest() {
		this.makeRequest(new SimulatedRequest(lastReply,
				"http://www.kingdomofloathing.com/fake.php", lastReply.html,
				mainLoop));
	}

	/**
	 * Connect a newly generated view to this model.
	 * 
	 * @param view
	 *            A callback back to the connecting view.
	 * @param context
	 *            The context of the connecting view.
	 */
	public void connectView(ProgressHandler<Callback> view, ViewContext context) {
		this.view = view;
		this.mainLoop = new GameHandler(context);
	}

	/**
	 * Send the callback to any connected view. Note this does nothing if no
	 * view is connected.
	 * 
	 * @param message
	 *            The message to send to the connected view.
	 */
	protected void notifyView(Callback message) {
		if (this.view != null)
			this.view.reportProgress(message);
	}

	/**
	 * Make a new request in the context of this model.
	 * 
	 * @param req	The request to make.
	 */
	protected void makeRequest(Request req) {
		req.makeAsync(session);
	}

	/**
	 * Get the default handler for any requests which cannot be
	 *  directly handled by the new model.
	 * 
	 * @return	A handler
	 */
	protected ResponseHandler getGameHandler() {
		return mainLoop;
	}

	public Session getSession() {
		return session;
	}
}
