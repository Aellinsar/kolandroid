package com.starfish.kol.model.models;

import java.util.ArrayList;

import com.starfish.kol.connection.Connection.ServerReply;
import com.starfish.kol.model.interfaces.ActionItem;
import com.starfish.kol.util.Regex;

public class FightModel extends FilteredWebModel {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = 7344809755641734582L;

	/**
	 * //Ignored for now. private static final Regex ROUND_NUMBER = new
	 * Regex("var onturn = (\\d+);", 1);
	 */
	private static final Regex FIGHT_OVER = new Regex("<!--WINWINWIN-->");

	private static final Regex ACTION_BTN = new Regex(
			"<input[^<>]*type=[\"']?hidden[\"']?[^<>]*value=[\"']?([^\"']*?)[\"']?>.*?<input[^<>]*value=[\"']?([^\"<>]*?)[\"']?>",
			1, 2);

	private static final Regex ALL_SKILLS = new Regex(
			"<select name=whichskill>(.*?)</select>", 1);
	private static final Regex ALL_ITEMS = new Regex(
			"<select name=whichitem>(.*?)</select>", 1);

	private static final Regex OPTION = new Regex(
			"<option([^<>]*?)>(.*?)</option>", 1, 2);
	private static final Regex OPTION_ID = new Regex(
			"value=\"?(\\d+)([<>\" ]|$)", 1);
	private static final Regex OPTION_PIC = new Regex(
			"picurl=\"?([^<>\" ]+)([<>\" ]|$)", 1);

	private static final Regex ACTION_BAR = new Regex(
			"<div[^>]*skillmenu[^>]*>.*?(?=<div[^>]*content_)");
	private static final Regex MAIN_TAG = new Regex(
			"<div[^>]*content_[^>]*(?=>)");
	private static final Regex BUTTON_REVEALER = new Regex(
			"<a[^>]*>\\(show old combat form\\)</a>");
	private static final Regex BUTTONS = new Regex("<form[^>]*>.*?</form>");

	private ArrayList<ActionItem> skills;
	private ArrayList<ActionItem> items;

	private boolean fightFinished = false;
	private ActionItem attack = new ActionItem("Attack",
			"fight.php?action=attack");

	public FightModel(ServerReply text) {
		super(text);

		processSkills(text.html);
		processItems(text.html);

		if (FIGHT_OVER.matches(text.html))
			fightFinished = true;
	}

	private void processSkills(String html) {
		this.skills = new ArrayList<ActionItem>();

		ArrayList<String[]> buttons = ACTION_BTN.extractAll(html);
		for (String[] button : buttons) {
			if (button == null)
				continue;
			String action = button[0];
			String text = button[1];
			String img = "";

			System.out.println("Found button: " + action);
			if (action == null || text == null || text.length() == 0)
				continue;
			if (action.contentEquals("attack") || action.contentEquals("skill")
					|| action.contentEquals("useitem"))
				continue;

			switch (action) {
			case "steal":
				img = "http://images.kingdomofloathing.com/itemimages/knobsack.gif";
				break;
			case "runaway":
				img = "http://images.kingdomofloathing.com/itemimages/runaway.gif";
				break;
			}

			this.skills.add(new ActionItem(text, img, "fight.php?action="
					+ action));
		}

		String dropdown = ALL_SKILLS.extractSingle(html);
		extractOptions(dropdown, this.skills,
				"fight.php?action=skill&whichskill=");
	}

	private void processItems(String html) {
		this.items = new ArrayList<ActionItem>();

		String dropdown = ALL_ITEMS.extractSingle(html);
		extractOptions(dropdown, this.items,
				"fight.php?action=useitem&whichitem=");
	}

	private void extractOptions(String dropdown, ArrayList<ActionItem> result,
			String action) {
		ArrayList<String[]> options = OPTION.extractAll(dropdown);

		for (String[] option : options) {
			if (option == null)
				continue;

			String num = OPTION_ID.extractSingle(option[0]);
			String img = OPTION_PIC.extractSingle(option[0]);
			String text = option[1];

			if (num == null || img == null || num.length() == 0)
				continue;

			if (!img.contains("images.kingdomofloathing.com"))
				img = "images.kingdomofloathing.com/itemimages/" + img;
			if (!img.endsWith(".gif") && !img.endsWith(".png"))
				img += ".gif";
			result.add(new ActionItem(text, img, action + num));
		}
	}

	public ArrayList<ActionItem> getSkills() {
		return this.skills;
	}

	public ArrayList<ActionItem> getItems() {
		return this.items;
	}

	public boolean isFightOver() {
		return fightFinished;
	}

	public ActionItem getAttack() {
		return attack;
	}

	@Override
	protected String filterHtml(String html) {
		// First, we remove all components of the action bar

		// Remove the top bar
		String noBar = ACTION_BAR.replaceAll(html, "");
		// Remove special styling on the content div
		String renamed = MAIN_TAG.replaceAll(noBar,
				"$0 style=\"top:0px; margin:8px\"");
		// Remove the "Show old combat form" link
		String actionClear = BUTTON_REVEALER.replaceAll(renamed, "");

		// Finally, remove all forms from the older version of the fight page.
		return BUTTONS.replaceAll(actionClear, "");
	}
}
