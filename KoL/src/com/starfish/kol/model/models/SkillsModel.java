package com.starfish.kol.model.models;

import java.util.ArrayList;

import com.starfish.kol.connection.Connection.ServerReply;
import com.starfish.kol.model.Model;
import com.starfish.kol.model.interfaces.BasicGroup;
import com.starfish.kol.model.interfaces.ModelGroup;
import com.starfish.kol.model.interfaces.MultiUseableItem;
import com.starfish.kol.model.interfaces.SimpleItem;
import com.starfish.kol.model.interfaces.SubtextItem;
import com.starfish.kol.request.Request;
import com.starfish.kol.request.ResponseHandler;
import com.starfish.kol.util.Regex;

public class SkillsModel extends Model<Void> {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = 295714863597L;

	private static final Regex RESULTS_PANE = new Regex(
			"<table[^>]*>.*?Results:.*?</table>", 0);
	private static final Regex PAGE_BODY = new Regex(
			"(<body[^>]*>)(.*?)(</body>)", 2);
	private String resultsPane;

	private static final Regex ITEMS_FORM = new Regex(
			"<form[^>]*restorerform[^>]*>.*?</form>", 0);
	
	private static final Regex SKILLS_FORM = new Regex(
			"<form[^>]*skillform[^>]*>.*?</form>", 0);
	private static final Regex BUFFS_FORM = new Regex("<form[^>]*buffform[^>]*>.*?</form>", 0);
	private static final Regex BUFFS_LIST = new Regex("<select[^>]*whichskill[^>]*>.*?</select>", 0);
	
	private static final Regex PWD = new Regex("<input[^>]*pwd[^>]*>", 0);
	private static final Regex EXTRACT_VALUE = new Regex(
			"value=[\"']?([0-9a-fA-F]*)", 1);

	private static final Regex OPTION_GROUP = new Regex(
			"(^|<optgroup[^>]*>).*?(?=<optgroup|$)", 0);
	private static final Regex OPTION_GROUP_NAME = new Regex(
			"<optgroup[^>]*label=[\"']?(.*?)[\"'>]", 1);

	private static final Regex OPTION = new Regex("<option[^>]*>.*?</option>",
			0);
	private static final Regex OPTION_VALUE = new Regex(
			"<option[^>]*value=[\"']?(\\d+)[^>\\d]*>", 1);
	private static final Regex OPTION_NAME = new Regex(
			"<option[^>]*>(.*?)</option>", 1);
	private static final Regex OPTION_DISABLED = new Regex(
			"<option[^>]*disabled[^>]*>", 0);
	private static final Regex OPTION_MP = new Regex("\\(.*?\\)", 0);
	
	private static final Regex OPTION_YOURSELF = new Regex("<option value=[\"']?(\\d+)[\"']?>\\(yourself\\)</option>", 1);

	private final ArrayList<RestorerItem> items;
	private final ArrayList<ModelGroup<SkillItem>> skills;

	private final boolean usedItem;
	public SkillsModel(ServerReply text) {
		super(text);
		this.loadContent(text);

		this.skills = processSkills(text.html);
		this.items = processItems(text.html);
		usedItem = text.url.contains("useditem");
	}
	
	private ArrayList<RestorerItem> processItems(String html) {
		ArrayList<RestorerItem> items = new ArrayList<RestorerItem>();

		String all_items = ITEMS_FORM.extractSingle(html);
		System.out.println(all_items);
		String pwd = EXTRACT_VALUE.extractSingle(PWD.extractSingle(all_items));
		String actionBase = "inv_use.php?pwd=" + pwd + "&action=useitem&bounce=skills.php%3Faction%3Duseditem";
		for(String option : OPTION.extractAllSingle(all_items)) {
			String name = OPTION_NAME.extractSingle(option);
			String value = OPTION_VALUE.extractSingle(option);
			
			if(name == null || value == null) continue;
			
			RestorerItem item = new RestorerItem(name, actionBase + "&whichitem=" + value);
			items.add(item);
		}
		
		return items;
	}
	
	private ArrayList<ModelGroup<SkillItem>> processSkills(String html) {
		ArrayList<ModelGroup<SkillItem>> skills = new ArrayList<ModelGroup<SkillItem>>();

		String all_skills = SKILLS_FORM.extractSingle(html);
		String pwd = EXTRACT_VALUE.extractSingle(PWD.extractSingle(all_skills));
		String actionBase = "skills.php?pwd=" + pwd + "&action=Skillz";

		for (String group : OPTION_GROUP.extractAllSingle(all_skills)) {
			String name = OPTION_GROUP_NAME.extractSingle(group);
			if(name == null) name = "Skills";
			
			BasicGroup<SkillItem> section = new BasicGroup<SkillItem>(name);
			for (String option : OPTION.extractAllSingle(group)) {
				if(option.contains("(select a skill)")) continue;
				
				SkillItem skill = processSkill(option, actionBase, false);
				section.add(skill);
			}
			skills.add(section);
		}

		String all_buffs = BUFFS_LIST.extractSingle(BUFFS_FORM.extractSingle(html));
		
		String yourself = OPTION_YOURSELF.extractSingle(all_buffs);
		
		pwd = EXTRACT_VALUE.extractSingle(PWD.extractSingle(all_buffs));
		actionBase = "skills.php?pwd=" + pwd + "&action=Skillz&targetplayer=" + yourself;
		BasicGroup<SkillItem> buffs = new BasicGroup<SkillItem>("Buffs");
		for (String option : OPTION.extractAllSingle(all_buffs)) {
			if(option.contains("(select a buff)")) continue;
			
			SkillItem skill = processSkill(option, actionBase, true);
			buffs.add(skill);
		}
		skills.add(buffs);
		
		return skills;
	}

	private SkillItem processSkill(String option, String actionBase,
			boolean isBuff) {
		String name = OPTION_NAME.extractSingle(option); // name of the skill
		String value = OPTION_VALUE.extractSingle(option); // id of the skill
		boolean disabled = OPTION_DISABLED.matches(option); // is skill disabled
		String subtext = OPTION_MP.extractSingle(option); // mp cost of skill
		if(subtext == null)
			subtext = "";

		name = OPTION_MP.replaceAll(name, ""); // remove mp from skill name
		return new SkillItem(name, subtext, actionBase + "&whichskill=" + value, disabled, isBuff);
	}

	protected boolean loadContent(ServerReply text) {
		if (!text.url.contains("skills.php")) {
			System.out
					.println("Attempted to load non-skill page into SkillModel: "
							+ text.url);
			return false;
		}

		resultsPane = RESULTS_PANE.extractSingle(text.html);

		return true;
	}

	public WebModel getResultsPane() {
		if (resultsPane == null)
			return null;

		ServerReply base = this.getBase();
		String html = PAGE_BODY.replaceAll(base.html, "$1<center>"
				+ resultsPane + "</center>$3");
		ServerReply newRep = new ServerReply(base.responseCode,
				base.redirectLocation, base.date, html, "small/skillresults.php",
				base.cookie);
		return new WebModel(newRep);
	}

	public ArrayList<ModelGroup<SkillItem>> getSkills() {
		return this.skills;
	}

	public ArrayList<RestorerItem> getRestorers() {
		return this.items;
	}

	public boolean getJustUsedItem() {
		return usedItem;
	}

	public class RestorerItem extends SimpleItem implements MultiUseableItem{
		/**
		 * Autogenerated by eclipse.
		 */
		private static final long serialVersionUID = 2931087678941136636L;

		private final String actionBase;
		
		public RestorerItem(String text, String actionBase) {
			super(text);
			this.actionBase = actionBase;
		}
		
		public RestorerItem(String text, String img, String actionBase) {
			super(text, img);
			this.actionBase = actionBase;
		}
		
		public void use(Model<?> context, String quantity) {
			String action = actionBase + "&itemquantity=" + quantity;
			System.out.println(action);
			context.makeRequest(new Request(action, ResponseHandler.none));
		}
		
	}
	
	public class SkillItem extends SimpleItem implements SubtextItem {
		/**
		 * Autogenerated by eclipse.
		 */
		private static final long serialVersionUID = 7468444853147077407L;

		private final String subtext;
		private final boolean disabled;
		private final String actionBase;
		private final boolean buff;

		public SkillItem(String name, String subtext, String actionBase,
				boolean disabled, boolean buff) {
			super(name, null);

			this.subtext = subtext;
			this.actionBase = actionBase;
			this.disabled = disabled;
			this.buff = buff;
		}

		public String getSubtext() {
			return subtext;
		}

		public boolean getIsDisabled() {
			return disabled;
		}
		
		public boolean isBuff() {
			return buff;
		}
		
		public void cast(SkillsModel context, String number, String onPlayer) {
			String action = actionBase;
			if(buff) {
				//do something with onPlayer
				action += "&specificplayer=" + onPlayer;
				action += "&bufftimes=" + number;
			} else {
				action += "&quantity=" + number;
			}
			
			context.makeRequest(new Request(action, ResponseHandler.none));
		}
	}

	public static enum SkillsMessage {
		REFRESH
	}
}
