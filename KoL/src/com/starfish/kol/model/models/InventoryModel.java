package com.starfish.kol.model.models;

import java.util.ArrayList;

import com.starfish.kol.connection.Connection.ServerReply;
import com.starfish.kol.model.Model;
import com.starfish.kol.model.ParentModel;
import com.starfish.kol.model.interfaces.ActionItem;
import com.starfish.kol.model.interfaces.BasicGroup;
import com.starfish.kol.model.interfaces.ModelGroup;
import com.starfish.kol.model.interfaces.ModelItem;
import com.starfish.kol.model.interfaces.SimpleItem;
import com.starfish.kol.model.interfaces.SubtextItem;
import com.starfish.kol.model.util.LiveModel;
import com.starfish.kol.util.Regex;

public class InventoryModel extends ParentModel<Void> {
	/**
	 * Autogenerated by eclipse.
	 */
	private static final long serialVersionUID = 5853274439517430160L;

	private static final Regex CHOSEN_CONSUME = new Regex("\\[consumables\\]");
	private static final Regex CHOSEN_EQUIP = new Regex("\\[equipment\\]");
	private static final Regex CHOSEN_MISC = new Regex("\\[miscellaneous\\]");
	private static final Regex CHOSEN_RECENT = new Regex("\\[recent items\\]");
	
	private int chosen;

	private static final Regex RESULTS_PANE = new Regex(
			"<div[^>]*id=[\"']?effdiv.*?</div>", 0);
	private static final Regex PAGE_BODY = new Regex(
			"(<body[^>]*>)(.*?)(</body>)");

	private InvPocketModel[] pockets;
	
	private String resultsPane;

	public InventoryModel(ServerReply text) {
		super(text);

		pockets = new InvPocketModel[4];
		pockets[0] = new InvPocketModel("inventory.php?which=1");
		pockets[1] = new InvPocketModel("inventory.php?which=2");
		pockets[2] = new InvPocketModel("inventory.php?which=3");
		pockets[3] = new InvPocketModel("inventory.php?which=f-1");
		
		loadContent(text);
	}

	protected boolean loadContent(ServerReply text) {
		if (!text.url.contains("inventory.php")) {
			System.out
					.println("Attempted to load non-inventory page into InventoryModel: "
							+ text.url);
			return false;
		}

		resultsPane = RESULTS_PANE.extractSingle(text.html);
		
		if (CHOSEN_CONSUME.matches(text.html)) {
			chosen = 0;
		} else if (CHOSEN_EQUIP.matches(text.html)) {
			chosen = 1;
		} else if (CHOSEN_MISC.matches(text.html)) {
			chosen = 2;
		} else if (CHOSEN_RECENT.matches(text.html)) {
			chosen = 3;
		} else
			throw new RuntimeException(
					"Unable to determine current inventory pane");

		pockets[chosen].loadContent(text);
		System.out.println("Loaded into slot " + chosen);
		return true;
	}

	public WebModel getResultsPane() {
		if (resultsPane == null)
			return null;

		ServerReply base = this.getBase();
		String html = PAGE_BODY.replaceAll(base.html, "$1<center>"
				+ resultsPane + "</center>$3");
		ServerReply newRep = new ServerReply(base.responseCode,
				base.redirectLocation, base.date, html, "small/invresults.php",
				base.cookie);
		return new WebModel(newRep);
	}

	public int getInitialChosen() {
		return chosen;
	}

	public InvPocketModel getPocket(int slot) {
		if(slot >= 0 && slot <= pockets.length)
			return pockets[slot];

		throw new RuntimeException("Attempted to load unknown slot");
	}

	@Override
	protected Model<?>[] getChildren() {
		return pockets;
	}

	private static final Regex SECTION = new Regex(
			"<a[^>]*><table.*?(</table>(?=.?<a)|$)", 0);
	private static final Regex SECTION_NAME = new Regex(
			"<font color=[\"']?white[\"']?>(.*?):</font>", 1);

	private static final Regex EQUIPMENT = new Regex(
			"<table[^>]*curequip[^>]*>.*?</table>", 0);

	private static final Regex ITEM = new Regex(
			"<table class=[\"']?item.*?</table>", 0);

	private static final Regex ITEM_EQUIPPED = new Regex("<tr>.*?(?=</?tr>)", 0);

	private static final Regex ITEM_IMG = new Regex(
			"<img[^>]*src=[\"']?([^\"' >]*)[\"' >]", 1);
	private static final Regex ITEM_DESCID = new Regex(
			"<img[^>]*descitem\\((\\d+)[,\\)]", 1);
	private static final Regex ITEM_NAME = new Regex("<b[^>]*>(.*?)</b>", 1);
	private static final Regex ITEM_QNTY = new Regex(
			"<b class=\"ircm\">.*?</b>&nbsp;<span>\\((\\d+)\\)</span>", 1);

	private static final Regex ITEM_SLOT = new Regex("<a[^>]*>([^<]*?)</a>:", 1);

	private static final Regex ITEM_ACTION = new Regex("<a.*?</a>", 0);
	private static final Regex ITEM_ACTION_NAME = new Regex(
			"<a[^>]*>.*?\\[([^\\]]*?)\\].*?</a>", 1);
	private static final Regex ITEM_ACTION_LINK = new Regex(
			"<a[^>]*href=[\"']?(.*?)[\"' >]", 1);
	private static final Regex ITEM_SUBTEXT = new Regex(
			"<font[^>]*size=[\"']?1[^>]*>.*?(\\([^<]*\\))</font>", 1);

	public class InvPocketModel extends LiveModel {
		/**
		 * Autogenerated by eclipse.
		 */
		private static final long serialVersionUID = 2109624705245532662L;

		private ArrayList<ModelGroup<InvItem>> items;

		public InvPocketModel(String updateUrl) {
			super(updateUrl);
			this.items = new ArrayList<ModelGroup<InvItem>>();
		}

		public ArrayList<ModelGroup<InvItem>> getItems() {
			this.access();
			return items;
		}

		private ModelGroup<InvItem> parseItems(String sectionName,
				ArrayList<String> items) {
			BasicGroup<InvItem> newsection = new BasicGroup<InvItem>(
					sectionName);
			for (String item : items) {

				String img = ITEM_IMG.extractSingle(item);
				String descid = ITEM_DESCID.extractSingle(item);
				String name = ITEM_NAME.extractSingle(item);
				String subtext = ITEM_SUBTEXT.extractSingle(item);
				String slot = ITEM_SLOT.extractSingle(item);

				String number = ITEM_QNTY.extractSingle(item);
				if (name == null)
					continue;
				if (subtext == null)
					subtext = "";

				subtext = subtext.replace("&nbsp;", "");
				if (number != null)
					name += " (" + number + ")";
				if (slot != null) {
					name = slot + ": " + name;
				}

				ArrayList<ModelItem> actions = new ArrayList<ModelItem>();
				actions.add(new ActionItem("Description", "",
						"desc_item.php?whichitem=" + descid));
				for (String action : ITEM_ACTION.extractAllSingle(item)) {
					String actName = ITEM_ACTION_NAME.extractSingle(action);
					String actDest = ITEM_ACTION_LINK.extractSingle(action);
					if (actName == null || actDest == null)
						continue;

					actName = actName.substring(0, 1).toUpperCase()
							+ actName.substring(1);
					actions.add(new ActionItem(actName, "", actDest));
				}

				newsection.add(new InvItem(name, subtext, img, actions));
			}
			return newsection;
		}

		protected void loadContent(ServerReply reply) {
			this.items = new ArrayList<ModelGroup<InvItem>>();

			String equipment = EQUIPMENT.extractSingle(reply.html);
			if (equipment != null) {
				ModelGroup<InvItem> equipped = parseItems("Equipped",
						ITEM_EQUIPPED.extractAllSingle(equipment));
				if (equipped.size() > 0)
					items.add(equipped);
			}

			for (String section : SECTION.extractAllSingle(reply.html)) {
				String sectionName = SECTION_NAME.extractSingle(section);
				ModelGroup<InvItem> newsection = parseItems(sectionName,
						ITEM.extractAllSingle(section));

				if (newsection.size() > 0)
					this.items.add(newsection);
			}
		}
	}

	public class InvItem extends SimpleItem implements SubtextItem {
		/**
		 * Autogenerated by eclipse.
		 */
		private static final long serialVersionUID = 8203542965489207042L;

		private final ArrayList<ModelItem> actions;
		private final String subtext;

		public InvItem(String name, String url, ArrayList<ModelItem> actions) {
			this(name, "", url, actions);
		}

		public InvItem(String name, String subtext, String url,
				ArrayList<ModelItem> actions) {
			super(name, url);
			this.actions = actions;
			this.subtext = subtext;
		}

		public ArrayList<ModelItem> getActions() {
			return actions;
		}

		public String getSubtext() {
			return subtext;
		}
	}
}
